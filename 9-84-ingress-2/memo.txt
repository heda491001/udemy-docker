继续上一节的内容
详细的解释以下请求从外边发送到容器的路径

首先，可以看一下两个节点上的iptables的转发设定
最后的这个部分，docker-ingress，两个节点都是一样的
    $ iptables -nvL -t nat
    ....
    Chain DOCKER-INGRESS (2 references)
     pkts bytes target   prot opt in  out   source        destination
       98  4716 DNAT     tcp  --  *   *     0.0.0.0/0     0.0.0.0/0     tcp dpt:8080 to:172.18.0.2:8080
    31249 1279K RETURN   all  --  *   *     0.0.0.0/0     0.0.0.0/0

这里最后的这个[ tcp dpt:8080 to:172.18.0.2:8080 ]比较重要
将所有的发送到8080的，转发到172.18.0.2:8080这里
172.18.0.2这个地址，是我们docker_gwbridge的网段
    任意node上查看ip a
    $ ip a
    .....
    4: docker_gwbridge: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:29:2e:e9:5a brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker_gwbridge
       valid_lft forever preferred_lft forever
    inet6 fe80::42:29ff:fe2e:e95a/64 scope link
       valid_lft forever preferred_lft forever
    ...

在任意node上，
    $ docker network inspect docker_gwbridge
    ......
      "Containers": {
            "93ba26bad926cf4e6bb48dbc35c31ded6c83762cad6c3263540c67dd5fd6d8e5": {
                "Name": "gateway_7ac67fd81e4c",
                "EndpointID": "518ee78253b4315365443405ec4e4e9b8c97d525953caf6eb52b2b68be9a27a9",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            },
            "ingress-sbox": {
                "Name": "gateway_ingress-sbox",
                "EndpointID": "58b43201e1da59fcf219e3f6ebb05c74bc6af78a89212866d7d0db439f8d63c4",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
    .......
    上边第一个id，是当前node上启动的容器的id
    第二个ingress-sbox就是ingress转发用的，
        但是实际上这个并不是一个真正的容器
        使用 container ls -a 也不会看到
        他只是命名空间 - network namespace
    虽然不是一个真正的容器，使用下边的方法启动一个容器可以让我们在下边的namespace来执行sh
        $ docker run -it --rm -v /var/run/docker/netns:/netns --privileged=true nicolaka/netshoot nsenter --net=/netns/ingress_sbox sh
        ~ #
        ~ # ip a
        1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
            link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
            inet 127.0.0.1/8 scope host lo
            valid_lft forever preferred_lft forever
        8: eth0@if9: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UP group default
            link/ether 02:42:0a:00:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
            inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0
            valid_lft forever preferred_lft forever
            inet 10.0.0.7/32 scope global eth0
            valid_lft forever preferred_lft forever
        12: eth1@if13: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
            link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 1
            inet 172.18.0.2/16 brd 172.18.255.255 scope global eth1
            valid_lft forever preferred_lft forever
        上边的结果中
            eth1，是docker_gwbridge
            eth0，则为ingress的overlay网络的地址
                就是我们的swarm自动创建的那个网络
    进一步查看这个命名空间的iptable
        $ iptables -nvL -t mangle
        Chain PREROUTING (policy ACCEPT 254 packets, 19206 bytes)
        pkts bytes target     prot opt in     out     source               destination
        168 10208 MARK       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 MARK set 0x102
        .......
        看到这里第一个链路的信息[ tcp dpt:8080 MARK set 0x102 ]
            给我们所有8080端口的访问，都添加了一个MARK
                MARaK的值为0x102，16进制的102，也就是258
    然后再查看以下ipvsadm
        $ ipvsadm
        IP Virtual Server version 1.2.1 (size=4096)
        Prot LocalAddress:Port Scheduler Flags
        -> RemoteAddress:Port           Forward Weight ActiveConn InActConn
        FWM  258 rr
        -> 10.0.0.8:0                   Masq    1      1          3
        -> 10.0.0.9:0                   Masq    1      0          3
        
        ipvsadm是ipvs的管理命令
        ipvs - IP Virtual Server，是一种常用的负载均衡的工具
        最后的这个规则是258，也就是我们刚才标记的那个
        10.0.0.8和10.0.0.9进行了负载均衡
            而这两个ip，也就是我们容器的地址
    再看一下路由设定
        $ ip route
        default via 172.18.0.1 dev eth1
        10.0.0.0/24 dev eth0 proto kernel scope link src 10.0.0.2
        172.18.0.0/16 dev eth1 proto kernel scope link src 172.18.0.2
        
        上边说的经过负载均衡，分别发给10.0.0.8和10.0.0.9
        那么又会走这里的eth0的网络，即ingress的overlay网络

详细的数据包路径，还参见最后示意图
https://dockertips.readthedocs.io/en/latest/docker-swarm/ingress-network.html

关于这个ingress的负载均衡
    这是一个stateless load balancing，即没有sticky session的功能
    这是三层的负载均衡，不是四层的 LB is at OSI Layer 3 (TCP), not Layer 4 (DNS)
    以上两个限制可以通过Nginx或者HAProxy LB proxy解决 （https://docs.docker.com/engine/swarm/ingress/）